
# This handler will create a FileStreamPhaseListener resource URL for the 
#  specified resource, using the contentSourceId provided, by calling 
#  {@link FileStreamerPhaseListener#createResourceUrl FileStreamerPhaseListener.createResourceUrl()}.
#  Inputs:
#  
#  path: the path to the resource
#  contentSourceId: the ID of the ContentSource to use in the URL. If this is
#  not provided {@link FileStreamerPhaseListener#createResourceUrl FileStreamerPhaseListener.createResourceUrl()} will
#  use the default {@link ContentSource}.
#  
#  Output:
#  
#  url: the FileStreamerPhaseListener-compatible resource URL
#  
fileStreamer.getResourceUrl.class=com.sun.jsftemplating.util.fileStreamer.FileStreamerPhaseListener
fileStreamer.getResourceUrl.method=getResourceUrl
fileStreamer.getResourceUrl.input[0].name=path
fileStreamer.getResourceUrl.input[0].type=java.lang.String
fileStreamer.getResourceUrl.input[0].required=true
fileStreamer.getResourceUrl.input[1].name=contentSourceId
fileStreamer.getResourceUrl.input[1].type=java.lang.String
fileStreamer.getResourceUrl.output[0].name=url
fileStreamer.getResourceUrl.output[0].type=java.lang.String

#  This handler returns the children of the given
# 	    UIComponent.
# 
# 	 Input value: "parent" -- Type: UIComponent
# 
# 	 Output value: "children" -- Type: java.util.List
# 	 Output value: "size"     -- Type: java.lang.Integer
getUIComponentChildren.class=com.sun.jsftemplating.handlers.ComponentHandlers
getUIComponentChildren.method=getChildren
getUIComponentChildren.input[0].name=parent
getUIComponentChildren.input[0].type=javax.faces.component.UIComponent
getUIComponentChildren.input[0].required=true
getUIComponentChildren.output[0].name=children
getUIComponentChildren.output[0].type=java.util.List
getUIComponentChildren.output[1].name=size
getUIComponentChildren.output[1].type=java.lang.Integer

#  This handler replaces the given old UIComponent in the
# 	    UIComponent tree with the given new
# 	    UIComponent.  If the new UIComponent is not
# 	    specified or is null, the old UIComponent will simply
# 	    be removed.
# 
# 	 Input value: "old" -- Type: UIComponent
# 	 Input value: "new" -- Type: UIComponent
replaceUIComponent.class=com.sun.jsftemplating.handlers.ComponentHandlers
replaceUIComponent.method=replaceUIComponent
replaceUIComponent.input[0].name=old
replaceUIComponent.input[0].type=javax.faces.component.UIComponent
replaceUIComponent.input[0].required=true
replaceUIComponent.input[1].name=new
replaceUIComponent.input[1].type=javax.faces.component.UIComponent
replaceUIComponent.input[1].required=false

#  This will build a UIComponent tree from a
# 	    {@link LayoutElement}.  You must pass in the {@link LayoutElement}
# 	    that will be used to create the UIComponent tree.
# 	    You may optionally pass in the parent UIComponent
# 	    which will serve as the parent for the newly created
# 	    UIComponent tree.  The resulting
# 	    UIComponent tree will be returned via the
# 	    result output value.  If more than 1 root node exists
# 	    for the given LayoutElement, the last added to the
# 	    parent will be returned.  Typically, you will pass in
# 	    a {@link LayoutComponent} as the layoutElement so
# 	    there will only be 1.
# 
# 	 It is recommended that you *do* supply the parent since EL
# 	    expressions may depend on this when creating the
# 	    UIComponent tree.
# 
# 	 One possible use case for calling this method would be to have a
# 	    dynamic "id" property of a {@link LayoutComponent}, call this
# 	    method multiple times with different values set in the "id"
# 	    property.  Remember, that you should not change a
# 	    {@link LayoutComponent} (or any {@link LayoutElement}) directly.
# 	    It is only safe to have dynamic values through EL bindings #{}.
# 
# 	 Another reason to use this handler is to cause a portion of a
# 	    UIComponent tree to be recreated.  This of often
# 	    desirable during Ajax requests so that factory options can be
# 	    reevaluated.
# 
# 	 Input value: "layoutElement" -- Type: LayoutElement
# 	 Input value: "parent"	 -- Type: UIComponent
# 
# 	 Output value: "result"     -- Type: UIComponent
buildUIComponentTree.class=com.sun.jsftemplating.handlers.ComponentHandlers
buildUIComponentTree.method=buildUIComponentTree
buildUIComponentTree.input[0].name=layoutElement
buildUIComponentTree.input[0].type=com.sun.jsftemplating.layout.descriptors.LayoutElement
buildUIComponentTree.input[0].required=true
buildUIComponentTree.input[1].name=parent
buildUIComponentTree.input[1].type=javax.faces.component.UIComponent
buildUIComponentTree.input[1].required=false
buildUIComponentTree.output[0].name=result
buildUIComponentTree.output[0].type=javax.faces.component.UIComponent

#  This handler creates a UIComponent.  It requires you
# 	    to pass in the componentType (type) and returns the
# 	    new component via the output parameter component.
# 
# 	 Input value: "type"	      -- Type: String
# 	 Input value: "parent"     -- Type: UIComponent
# 
# 	 Output value: "component" -- Type: UIComponent
createComponent.class=com.sun.jsftemplating.handlers.ComponentHandlers
createComponent.method=createComponent
createComponent.input[0].name=type
createComponent.input[0].type=java.lang.String
createComponent.input[0].required=true
createComponent.input[1].name=id
createComponent.input[1].type=java.lang.String
createComponent.input[1].required=false
createComponent.input[2].name=parent
createComponent.input[2].type=javax.faces.component.UIComponent
createComponent.input[2].required=false
createComponent.output[0].name=component
createComponent.output[0].type=javax.faces.component.UIComponent

#  This handler sets a UIComponent attribute /
# 	    property.
# 
# 	 Input value: "component" -- Type: UIComponent
# 	 Input value: "property" -- Type: String
# 	 Input value: "value" -- Type: Object
setUIComponentProperty.class=com.sun.jsftemplating.handlers.ComponentHandlers
setUIComponentProperty.method=setComponentProperty
setUIComponentProperty.input[0].name=component
setUIComponentProperty.input[0].type=javax.faces.component.UIComponent
setUIComponentProperty.input[0].required=true
setUIComponentProperty.input[1].name=property
setUIComponentProperty.input[1].type=java.lang.String
setUIComponentProperty.input[1].required=true
setUIComponentProperty.input[2].name=value

#  This handler finds the requested UIComponent by
# 	    clientId.  It takes clientId as an input
# 	    parameter, and returns component as an output
# 	    parameter.
getUIComponent.class=com.sun.jsftemplating.handlers.ComponentHandlers
getUIComponent.method=getUIComponent
getUIComponent.input[0].name=clientId
getUIComponent.input[0].type=java.lang.String
getUIComponent.input[0].required=true
getUIComponent.output[0].name=component
getUIComponent.output[0].type=javax.faces.component.UIComponent

#  This handler retrieves a property from the given
# 	    UIComponent.  It expects component and
# 	    name as an input parameters, and returns
# 	    value as an output parameter containing the value of
# 	    the property.
getUIComponentProperty.class=com.sun.jsftemplating.handlers.ComponentHandlers
getUIComponentProperty.method=getUIComponentProperty
getUIComponentProperty.input[0].name=component
getUIComponentProperty.input[0].type=javax.faces.component.UIComponent
getUIComponentProperty.input[0].required=true
getUIComponentProperty.input[1].name=name
getUIComponentProperty.input[1].type=java.lang.String
getUIComponentProperty.input[1].required=true
getUIComponentProperty.output[0].name=value
getUIComponentProperty.output[0].type=java.lang.Object

#  This handler retrieves the requested the "facet" from the given
# 	    UIComponent.  component or
# 	    clientId for the component must be passed in.  The
# 	    facet name must also be specified.  It will return
# 	    the UIComponent found (or null) in the
# 	    value output parameter.
getFacet.class=com.sun.jsftemplating.handlers.ComponentHandlers
getFacet.method=getFacet
getFacet.input[0].name=clientId
getFacet.input[0].type=java.lang.String
getFacet.input[0].required=false
getFacet.input[1].name=component
getFacet.input[1].type=javax.faces.component.UIComponent
getFacet.input[1].required=false
getFacet.input[2].name=name
getFacet.input[2].type=java.lang.String
getFacet.input[2].required=true
getFacet.output[0].name=value
getFacet.output[0].type=javax.faces.component.UIComponent

#  This handler encodes the given UIComponent.  You can
# 	    specify the UIComponent by clientId, or
# 	    pass it in directly via the component input
# 	    parameter.
encodeUIComponent.class=com.sun.jsftemplating.handlers.ComponentHandlers
encodeUIComponent.method=encode
encodeUIComponent.input[0].name=clientId
encodeUIComponent.input[0].type=java.lang.String
encodeUIComponent.input[0].required=false
encodeUIComponent.input[1].name=component
encodeUIComponent.input[1].type=javax.faces.component.UIComponent
encodeUIComponent.input[1].required=false

#  This handler will print out the structure of a
# 	    UIComponent tree from the given UIComponent.
dumpUIComponentTree.class=com.sun.jsftemplating.handlers.ComponentHandlers
dumpUIComponentTree.method=dumpUIComponentTree
dumpUIComponentTree.input[0].name=component
dumpUIComponentTree.input[0].type=javax.faces.component.UIComponent
dumpUIComponentTree.input[0].required=false
dumpUIComponentTree.output[0].name=value
dumpUIComponentTree.output[0].type=java.lang.String

#  This handler will print out the structure of a
# 	    {@link LayoutElement} tree from the given LayoutElement.
dumpLayoutElementTree.class=com.sun.jsftemplating.handlers.ComponentHandlers
dumpLayoutElementTree.method=dumpLayoutElementTree
dumpLayoutElementTree.input[0].name=layoutElement
dumpLayoutElementTree.input[0].type=com.sun.jsftemplating.layout.descriptors.LayoutElement
dumpLayoutElementTree.input[0].required=false
dumpLayoutElementTree.output[0].name=value
dumpLayoutElementTree.output[0].type=java.lang.String

#  This handler gets a request attribute.  It requires "key" as an
# 	    input value.  It returns "value" as an output value.  Note this
# 	    can also be done via #{requestScope["attributeName"]}.
getAttribute.class=com.sun.jsftemplating.handlers.ScopeHandlers
getAttribute.method=getAttribute
getAttribute.input[0].name=key
getAttribute.input[0].type=java.lang.String
getAttribute.input[0].required=true
getAttribute.output[0].name=value
getAttribute.output[0].type=java.lang.Object

#  This handler sets a request attribute.  It requires "key" and
# 	    "value" input values to be passed in.
setAttribute.class=com.sun.jsftemplating.handlers.ScopeHandlers
setAttribute.method=setAttribute
setAttribute.input[0].name=key
setAttribute.input[0].type=java.lang.String
setAttribute.input[0].required=true
setAttribute.input[1].name=value
setAttribute.input[1].required=true

#  This handler produces a String consisting of all the request
# 	    attributes.  It outputs this via the "value" output value.
dumpAttributes.class=com.sun.jsftemplating.handlers.ScopeHandlers
dumpAttributes.method=dumpAttributes
dumpAttributes.output[0].name=value
dumpAttributes.output[0].type=java.lang.String

#  This handler gets a "page" session attribute.  It requires
# 	    key as an input value.  It returns value
# 	    as an output value.  You may pass in the page
# 	    (UIViewRoot) as an input value via the
# 	    page input value, if you don't the current
# 	    UIViewRoot will be used.
getPageSessionAttribute.class=com.sun.jsftemplating.handlers.ScopeHandlers
getPageSessionAttribute.method=getPageSessionAttribute
getPageSessionAttribute.input[0].name=key
getPageSessionAttribute.input[0].type=java.lang.String
getPageSessionAttribute.input[0].required=true
getPageSessionAttribute.input[1].name=page
getPageSessionAttribute.input[1].type=javax.faces.component.UIViewRoot
getPageSessionAttribute.input[1].required=false
getPageSessionAttribute.output[0].name=value
getPageSessionAttribute.output[0].type=java.io.Serializable

#  This handler sets a page session attribute.  It requires
# 	    key and value input values to be passed
# 	    in.  page may optionally be passed in to specify the
# 	    page (UIViewRoot) that should be used -- otherwise
# 	    the current UIViewRoot is used.
setPageSessionAttribute.class=com.sun.jsftemplating.handlers.ScopeHandlers
setPageSessionAttribute.method=setPageSessionAttribute
setPageSessionAttribute.input[0].name=key
setPageSessionAttribute.input[0].type=java.lang.String
setPageSessionAttribute.input[0].required=true
setPageSessionAttribute.input[1].name=value
setPageSessionAttribute.input[1].type=java.io.Serializable
setPageSessionAttribute.input[1].required=true
setPageSessionAttribute.input[2].name=page
setPageSessionAttribute.input[2].type=javax.faces.component.UIViewRoot
setPageSessionAttribute.input[2].required=false

#  This handler produces a String consisting of all the page session
# 	    attributes.  It outputs this via the value output
# 	    value.  This handler optionally accepts the page input
# 	    value (UIViewRoot) -- if not supplied the current
# 	    UIViewRoot is used.
dumpPageSessionAttributes.class=com.sun.jsftemplating.handlers.ScopeHandlers
dumpPageSessionAttributes.method=dumpPageSessionAttributes
dumpPageSessionAttributes.input[0].name=page
dumpPageSessionAttributes.input[0].type=javax.faces.component.UIViewRoot
dumpPageSessionAttributes.input[0].required=false
dumpPageSessionAttributes.output[0].name=value
dumpPageSessionAttributes.output[0].type=java.lang.String

#  This handler gets a session attribute.  It requires "key" as an
# 	    input value.  It returns "value" as an output value.  Note this
# 	    can also be done via #{sessionScope["attributeName"]}.
getSessionAttribute.class=com.sun.jsftemplating.handlers.ScopeHandlers
getSessionAttribute.method=getSessionAttribute
getSessionAttribute.input[0].name=key
getSessionAttribute.input[0].type=java.lang.String
getSessionAttribute.input[0].required=true
getSessionAttribute.output[0].name=value
getSessionAttribute.output[0].type=java.lang.Object

#  This handler sets a session attribute.  It requires "key" and
# 	    "value" input values to be passed in.
setSessionAttribute.class=com.sun.jsftemplating.handlers.ScopeHandlers
setSessionAttribute.method=setSessionAttribute
setSessionAttribute.input[0].name=key
setSessionAttribute.input[0].type=java.lang.String
setSessionAttribute.input[0].required=true
setSessionAttribute.input[1].name=value
setSessionAttribute.input[1].required=true

#  This handler produces a String consisting of all the request
# 	    attributes.  It outputs this via the "value" output value.
dumpSessionAttributes.class=com.sun.jsftemplating.handlers.ScopeHandlers
dumpSessionAttributes.method=dumpSessionAttributes
dumpSessionAttributes.output[0].name=value
dumpSessionAttributes.output[0].type=java.lang.String

#  This handler gets a application attribute.  It requires "key" as an
# 	    input value.  It returns "value" as an output value.  Note this
# 	    can also be done via #{applicationScope["attributeName"]}.
getApplicationAttribute.class=com.sun.jsftemplating.handlers.ScopeHandlers
getApplicationAttribute.method=getApplicationAttribute
getApplicationAttribute.input[0].name=key
getApplicationAttribute.input[0].type=java.lang.String
getApplicationAttribute.input[0].required=true
getApplicationAttribute.output[0].name=value
getApplicationAttribute.output[0].type=java.lang.Object

#  This handler sets a application attribute.  It requires "key" and
# 	    "value" input values to be passed in.
setApplicationAttribute.class=com.sun.jsftemplating.handlers.ScopeHandlers
setApplicationAttribute.method=setApplicationAttribute
setApplicationAttribute.input[0].name=key
setApplicationAttribute.input[0].type=java.lang.String
setApplicationAttribute.input[0].required=true
setApplicationAttribute.input[1].name=value
setApplicationAttribute.input[1].required=true

#  This handler produces a String consisting of all the request
# 	    attributes.  It outputs this via the "value" output value.
dumpApplicationAttributes.class=com.sun.jsftemplating.handlers.ScopeHandlers
dumpApplicationAttributes.method=dumpApplicationAttributes
dumpApplicationAttributes.output[0].name=value
dumpApplicationAttributes.output[0].type=java.lang.String

#  This handler sets a ResourceBundle in desired request
# 	    attribute.  It requires "key" as an input value, which is the
# 	    request attribute key used to store the bundle.  "bundle" is also
# 	    required as an input value, this is the fully qualified name of the
# 	    bundle.  Optionally the "locale" can be specified, if not the web
# 	    user's locale will be used.  It returns "bundle" as an output
# 	    value.
setResourceBundle.class=com.sun.jsftemplating.handlers.ScopeHandlers
setResourceBundle.method=setResourceBundle
setResourceBundle.input[0].name=key
setResourceBundle.input[0].type=java.lang.String
setResourceBundle.input[0].required=true
setResourceBundle.input[1].name=bundle
setResourceBundle.input[1].type=java.lang.String
setResourceBundle.input[1].required=true
setResourceBundle.input[2].name=locale
setResourceBundle.input[2].type=java.util.Locale
setResourceBundle.input[2].required=false
setResourceBundle.output[0].name=result
setResourceBundle.output[0].type=java.util.ResourceBundle

#  This method provides access to the named cookie.  If the cookie doesn't exist, the value
#       will be set to "" 
getCookie.class=com.sun.jsftemplating.handlers.ScopeHandlers
getCookie.method=getCookie
getCookie.input[0].name=key
getCookie.input[0].type=java.lang.String
getCookie.input[0].required=true
getCookie.output[0].name=value
getCookie.output[0].type=java.lang.String

#  This method set the named cookie with the given value.  Because
# 	    cookies are set via a response header, this method must be called
# 	    before the content rendering has begun (before the rendering
# 	    phase).  This method is not valid for Portlets and will do nothing
# 	    if called in a Portlet environment.
setCookie.class=com.sun.jsftemplating.handlers.ScopeHandlers
setCookie.method=setCookie
setCookie.input[0].name=key
setCookie.input[0].type=java.lang.String
setCookie.input[0].required=true
setCookie.input[1].name=value
setCookie.input[1].type=java.lang.String
setCookie.input[1].required=true
setCookie.input[2].name=maxAge
setCookie.input[2].type=java.lang.Integer
setCookie.input[2].defaultValue=-1
setCookie.input[2].required=false
setCookie.input[3].name=domain
setCookie.input[3].type=java.lang.String
setCookie.input[3].required=false
setCookie.input[4].name=path
setCookie.input[4].type=java.lang.String
setCookie.input[4].required=false
setCookie.input[5].name=secure
setCookie.input[5].type=java.lang.Boolean
setCookie.input[5].defaultValue=false
setCookie.input[5].required=false
setCookie.input[6].name=version
setCookie.input[6].type=java.lang.Integer
setCookie.input[6].required=false

#  This {@link Handler} allows you to set a preference via the Java
# 	    Preferences API.  The root specifies the path in
# 	    which the preference should be stored (e.g. '/org/company/foo').
# 	    The key is the name of the preference, and the
# 	    value is the value of the preference.
setPreference.class=com.sun.jsftemplating.handlers.ScopeHandlers
setPreference.method=setPreference
setPreference.input[0].name=root
setPreference.input[0].type=java.lang.String
setPreference.input[0].required=true
setPreference.input[1].name=key
setPreference.input[1].type=java.lang.String
setPreference.input[1].required=true
setPreference.input[2].name=value
setPreference.input[2].type=java.lang.String
setPreference.input[2].required=true

#  This {@link Handler} allows you to get a preference via the Java
# 	    Preferences API.  The root specifies the path in
# 	    which the preference should be stored (e.g. '/org/company/foo').
# 	    The key is the name of the preference, and the
# 	    default is the value of the preference if it does
# 	    not yet exist.  The preference value will be returned via the
# 	    value output value.
getPreference.class=com.sun.jsftemplating.handlers.ScopeHandlers
getPreference.method=getPreference
getPreference.input[0].name=root
getPreference.input[0].type=java.lang.String
getPreference.input[0].required=true
getPreference.input[1].name=key
getPreference.input[1].type=java.lang.String
getPreference.input[1].required=true
getPreference.input[2].name=default
getPreference.input[2].type=java.lang.String
getPreference.output[0].name=value
getPreference.output[0].type=java.lang.String

#  This handler returns a UIViewRoot.  If the
# 	    id parameter is supplied it will return the requested
# 	    UIViewRoot (this may fail and cause an exception). If
# 	    the id is not supplied, it will return the
# 	    current UIViewRoot.  The result will be returned in
# 	    an output parameter named viewRoot.
getUIViewRoot.class=com.sun.jsftemplating.handlers.NavigationHandlers
getUIViewRoot.method=getUIViewRoot
getUIViewRoot.input[0].name=id
getUIViewRoot.input[0].type=java.lang.String
getUIViewRoot.output[0].name=viewRoot
getUIViewRoot.output[0].type=javax.faces.component.UIViewRoot

#  This method gives you a "resource URL" as defined by the
# 	    ViewHandler's getActionURL(String
# 	    url) method.
getActionURL.class=com.sun.jsftemplating.handlers.NavigationHandlers
getActionURL.method=getActionURL
getActionURL.input[0].name=url
getActionURL.input[0].type=java.lang.String
getActionURL.input[0].required=true
getActionURL.output[0].name=result
getActionURL.output[0].type=java.lang.String

#  This method gives you a "resource URL" as defined by the
# 	    ViewHandler's getResourceURL(String
# 	    url) method.
getResourceURL.class=com.sun.jsftemplating.handlers.NavigationHandlers
getResourceURL.method=getResourceURL
getResourceURL.input[0].name=url
getResourceURL.input[0].type=java.lang.String
getResourceURL.input[0].required=true
getResourceURL.output[0].name=result
getResourceURL.output[0].type=java.lang.String

#  This handler navigates to the given page.  page may
# 	    either be a UIViewRoot or a String
# 	    representing a UIViewRoot.  Passing in a
# 	    String name of a UIViewRoot will always
# 	    create a new UIViewRoot.  Passing in the
# 	    UIViewRoot provides an opportunity to customize the
# 	    UIComponent tree that will be displayed.
# 
# 	 The {@link #getUIViewRoot(HandlerContext)} handler provides a way
# 	    to obtain a UIViewRoot.
# 
# 	 Input value: "page" -- Type: Object (should be a
# 	    String or a UIViewRoot).
navigate.class=com.sun.jsftemplating.handlers.NavigationHandlers
navigate.method=navigate
navigate.input[0].name=page
navigate.input[0].type=java.lang.Object
navigate.input[0].required=true

#  This handler redirects to the given page.
# 
# 	 Input value: "page" -- Type: String
redirect.class=com.sun.jsftemplating.handlers.NavigationHandlers
redirect.method=redirect
redirect.input[0].name=page
redirect.input[0].type=java.lang.String
redirect.input[0].required=true

#  This handler forwards to the given page.  Normally you will want
# 	    to do {@link #navigate} as that follows JSF patterns.  This uses
# 	    the raw dispatcher forward mechanism (via the ExternalContext).
# 
# 	 Input value: "url" -- Type: String
dispatch.class=com.sun.jsftemplating.handlers.NavigationHandlers
dispatch.method=dispatch
dispatch.input[0].name=path
dispatch.input[0].type=java.lang.String
dispatch.input[0].required=true

#  This handler uses the special "condition" attribute to determine if
# 	    it should execute (and therefor any of its child handlers.  So the
# 	    implementation itself does nothing.
if.class=com.sun.jsftemplating.handlers.UtilHandlers
if.method=ifHandler
if.input[0].name=condition
if.input[0].type=java.lang.String

#  A utility handler that resembles the for() method in Java. Handlers
# 	    inside the for loop will be executed in a loop.  The starting index
# 	    is specified by start.  The index will increase
# 	    sequentially untill it is equal to end.
# 	    var will be a request attribute that is set to the
# 	    current index value as the loop iterates.
# 	 For example:
# 
# 	forLoop(start="1"  end="3" var="foo") {...}
# 
# 	The handlers inside the {...} will be executed 2 times
# 	   (with foo=1 and foo=2).
# 
# 	start -- type: Integer Starting
# 		index, defaults to zero if not specified.
# 	    end -- type: Integer; Ending index.
# 		Required.
# 	    var -- type: String; Request
# 		attribute to be set in the for loop to the value of the
# 		index.
for.class=com.sun.jsftemplating.handlers.UtilHandlers
for.method=forLoop
for.input[0].name=start
for.input[0].type=java.lang.Integer
for.input[1].name=end
for.input[1].type=java.lang.Integer
for.input[1].required=true
for.input[2].name=var
for.input[2].type=java.lang.String
for.input[2].required=true

#  This handler writes using System.out.println.  It
# 	    requires that value be supplied as a String input
# 	    parameter.
println.class=com.sun.jsftemplating.handlers.UtilHandlers
println.method=println
println.input[0].name=value
println.input[0].type=java.lang.String
println.input[0].required=true

#  This handler writes using
# 	    FacesContext.getResponseWriter().
write.class=com.sun.jsftemplating.handlers.UtilHandlers
write.method=write
write.input[0].name=value
write.input[0].type=java.lang.String
write.input[0].required=true

#  This handler decrements a number by 1.  This handler requires
# 	    "number" to be supplied as an Integer input value.  It sets an
# 	    output value "value" to number-1.
dec.class=com.sun.jsftemplating.handlers.UtilHandlers
dec.method=dec
dec.input[0].name=number
dec.input[0].type=java.lang.Integer
dec.input[0].required=true
dec.output[0].name=value
dec.output[0].type=java.lang.Integer

#  This handler increments a number by 1.  This handler requires
# 	    "number" to be supplied as an Integer input value.  It sets an
# 	    output value "value" to number+1.
inc.class=com.sun.jsftemplating.handlers.UtilHandlers
inc.method=inc
inc.input[0].name=number
inc.input[0].type=java.lang.Integer
inc.input[0].required=true
inc.output[0].name=value
inc.output[0].type=java.lang.Integer

#  This method returns an Iterator for the given
# 	    List.  The List input value key is:
# 	    "list".  The output value key for the Iterator is:
# 	    "iterator".
getIterator.class=com.sun.jsftemplating.handlers.UtilHandlers
getIterator.method=getIterator
getIterator.input[0].name=list
getIterator.input[0].type=java.util.List
getIterator.input[0].required=true
getIterator.output[0].name=iterator
getIterator.output[0].type=java.util.Iterator

#  This method returns a Boolean value representing
# 	    whether another value exists for the given Iterator.
# 	    The Iterator input value key is: "iterator".  The
# 	    output value key is "hasNext".
iteratorHasNext.class=com.sun.jsftemplating.handlers.UtilHandlers
iteratorHasNext.method=iteratorHasNext
iteratorHasNext.input[0].name=iterator
iteratorHasNext.input[0].type=java.util.Iterator
iteratorHasNext.input[0].required=true
iteratorHasNext.output[0].name=hasNext
iteratorHasNext.output[0].type=java.lang.Boolean

#  This method returns the next object in the List that
# 	    the given Iterator is iterating over.  The
# 	    Iterator input value key is: "iterator".  The
# 	    output value key is "next".
iteratorNext.class=com.sun.jsftemplating.handlers.UtilHandlers
iteratorNext.method=iteratorNext
iteratorNext.input[0].name=iterator
iteratorNext.input[0].type=java.util.Iterator
iteratorNext.input[0].required=true
iteratorNext.output[0].name=next

#  This method creates a List.  Optionally you may supply "size" to
# 	    create a List of blank "" values of the specified size.  The
# 	    output value from this handler is "result".
createList.class=com.sun.jsftemplating.handlers.UtilHandlers
createList.method=createList
createList.input[0].name=size
createList.input[0].type=java.lang.Integer
createList.input[0].required=true
createList.output[0].name=result
createList.output[0].type=java.util.List

#  This method creates a Map (HashMap).
# 	    The output value from this handler is "result".
createMap.class=com.sun.jsftemplating.handlers.UtilHandlers
createMap.method=createMap
createMap.output[0].name=result
createMap.output[0].type=java.util.Map

#  This method adds a value to a Map.  You must supply
# 	    map to use as well as the key and
# 	    value to add.
mapPut.class=com.sun.jsftemplating.handlers.UtilHandlers
mapPut.method=mapPut
mapPut.input[0].name=map
mapPut.input[0].type=java.util.Map
mapPut.input[0].required=true
mapPut.input[1].name=key
mapPut.input[1].type=java.lang.Object
mapPut.input[1].required=true
mapPut.input[2].name=value
mapPut.input[2].type=java.lang.Object
mapPut.input[2].required=true

#  This method returns true.  It does not take any input or provide
# 	    any output values.
returnTrue.class=com.sun.jsftemplating.handlers.UtilHandlers
returnTrue.method=returnTrue

#  This method returns false.  It does not take any input or provide
# 	    any output values.
returnFalse.class=com.sun.jsftemplating.handlers.UtilHandlers
returnFalse.method=returnFalse

#  This method enables you to retrieve the clientId for the given
# 	    UIComponent.
getClientId.class=com.sun.jsftemplating.handlers.UtilHandlers
getClientId.method=getClientId
getClientId.input[0].name=component
getClientId.input[0].type=javax.faces.component.UIComponent
getClientId.input[0].required=true
getClientId.output[0].name=clientId
getClientId.output[0].type=java.lang.String

#  This method enables you to retrieve the id or clientId for the given
# 	    Object which is expected to be a
# 	    UIComponent or a String that already
# 	    represents the clientId.
getId.class=com.sun.jsftemplating.handlers.UtilHandlers
getId.method=getId
getId.input[0].name=object
getId.input[0].required=true
getId.output[0].name=id
getId.output[0].type=java.lang.String
getId.output[1].name=clientId
getId.output[1].type=java.lang.String

#  This handler provides a way to see the call stack by printing a
# 	    stack trace.  The output will go to stderr and will also be
# 	    returned in the output value "stackTrace".  An optional message
# 	    may be provided to be included in the trace.
printStackTrace.class=com.sun.jsftemplating.handlers.UtilHandlers
printStackTrace.method=printStackTrace
printStackTrace.input[0].name=msg
printStackTrace.input[0].type=java.lang.String
printStackTrace.output[0].name=stackTrace
printStackTrace.output[0].type=java.lang.String

#  This handler prints out the contents of the given UIComponent's
# 	    attribute map.
dumpAttributeMap.class=com.sun.jsftemplating.handlers.UtilHandlers
dumpAttributeMap.method=dumpAttributeMap
dumpAttributeMap.input[0].name=component
dumpAttributeMap.input[0].type=javax.faces.component.UIComponent

#  This handler sets the encoding type of the given UIViewRoot's
# 	    attribute map.
setEncoding.class=com.sun.jsftemplating.handlers.UtilHandlers
setEncoding.method=setEncoding
setEncoding.input[0].name=value
setEncoding.input[0].type=java.lang.String

#  This handler url encodes the given String.  It will return null if
# 	    null is given and it will use a default encoding of "UTF-8" if no
# 	    encoding is specified.
urlencode.class=com.sun.jsftemplating.handlers.UtilHandlers
urlencode.method=urlencode
urlencode.input[0].name=value
urlencode.input[0].type=java.lang.String
urlencode.input[0].required=true
urlencode.input[1].name=encoding
urlencode.input[1].type=java.lang.String
urlencode.output[0].name=result
urlencode.output[0].type=java.lang.String

#  This handler marks the response complete.  This means that no
# 	    additional response will be sent.  This is useful if you've
# 	    provided a response already and you don't want JSF to do it again
# 	    (it may cause problems to do it 2x).
responseComplete.class=com.sun.jsftemplating.handlers.UtilHandlers
responseComplete.method=responseComplete

#  This handler indicates to JSF that the request should proceed
# 	    immediately to the render response phase.  It will be ignored if
# 	    rendering has already begun.  This is useful if you want to stop
# 	    processing and jump to the response.  This is often the case when
# 	    an error ocurrs or validation fails.  Typically the page the user
# 	    is on will be reshown (although if navigation has already
# 	    occurred, the new page will be shown.
renderResponse.class=com.sun.jsftemplating.handlers.UtilHandlers
renderResponse.method=renderResponse

#  This handler gets the current system time in milliseconds.  It may
# 	    be used to time things.
getDate.class=com.sun.jsftemplating.handlers.UtilHandlers
getDate.method=getDate
getDate.output[0].name=time
getDate.output[0].type=java.lang.Long

#  This method converts '<' and '>' characters into "amp;lt;"
# 	    and "amp;gt;" in an effort to avoid HTML from being processed.
# 	    This can be used to avoid <script> tags, or to show code
# 	    examples which might include HTML characters.  'amp;' characters
# 	    will also be converted to "amp;amp;".
htmlEscape.class=com.sun.jsftemplating.handlers.UtilHandlers
htmlEscape.method=htmlEscape
htmlEscape.input[0].name=value
htmlEscape.input[0].type=java.lang.String
htmlEscape.input[0].required=true
htmlEscape.output[0].name=result
htmlEscape.output[0].type=java.lang.String

#  This handler returns the Lockhart version of Options of the drop-down
# 	    of the given labels and values.
# 	    labels and values arrays must be equal in
# 	    size and in matching sequence.
# 
# 	 Input value: labels -- Type:
# 	    java.util.Collection
# 
# 	 Input value: values -- Type:
# 	    java.util.Collection
# 
#    Output value: options -- Type:
# 	    SelectItem[] (castable to Option[])
getSunOptions.class=com.sun.jsftemplating.handlers.OptionsHandlers
getSunOptions.method=getSunOptions
getSunOptions.input[0].name=labels
getSunOptions.input[0].type=java.util.Collection
getSunOptions.input[0].required=true
getSunOptions.input[1].name=values
getSunOptions.input[1].type=java.util.Collection
getSunOptions.input[1].required=true
getSunOptions.output[0].name=options
getSunOptions.output[0].type=[Ljavax.faces.model.SelectItem;

#  This handler provides information about all known (global)
# 	    {@link com.sun.jsftemplating.layout.descriptors.handler.Handler}s.
# 	    It allows an input value ("id") to be passed in, this is optional.
# 	    If the value is supplied, it will return information about that
# 	    handler only.  If not supplied, it will return information about
# 	    all handlers.  Output is passed via output values "info", "ids",
# 	    and "handler".  "info" is always returned and contains a
# 	    String of information.  "ids" is always returned and
# 	    contains a Set of global {@link HandlerDefinition}
# 	    ids that may be passed into this method.  "handler" is returned
# 	    only if an id was specified and will contain the requested
# 	    {@link HandlerDefinition}.
getGlobalHandlerInformation.class=com.sun.jsftemplating.handlers.MetaDataHandlers
getGlobalHandlerInformation.method=getGlobalHandlerInformation
getGlobalHandlerInformation.input[0].name=id
getGlobalHandlerInformation.input[0].type=java.lang.String
getGlobalHandlerInformation.input[0].required=false
getGlobalHandlerInformation.output[0].name=info
getGlobalHandlerInformation.output[0].type=java.lang.String
getGlobalHandlerInformation.output[1].name=ids
getGlobalHandlerInformation.output[1].type=java.util.Set
getGlobalHandlerInformation.output[2].name=value
getGlobalHandlerInformation.output[2].type=com.sun.jsftemplating.layout.descriptors.handler.HandlerDefinition

#  This handler provides information about all known (global)
# 	    {@link ComponentType}s.  It allows an input value ("id") to be
# 	    passed in, this is optional.  If the value is supplied, it will
# 	    return information about that {@link ComponentType} only.  If not
# 	    supplied, it will return information about all
# 	    {@link ComponentType}s.  Output is passed via output values
# 	    "info", "ids", and "value".  "info" is always returned and
# 	    contains a String of information.  "ids" is always
# 	    returned and contains a Set of global
# 	    {@link ComponentType} ids that may be passed into this method.
# 	    "value" is returned only if an id was specified and will contain
# 	    the requested {@link ComponentType}.
getGlobalComponentTypeInformation.class=com.sun.jsftemplating.handlers.MetaDataHandlers
getGlobalComponentTypeInformation.method=getGlobalComponentTypeInformation
getGlobalComponentTypeInformation.input[0].name=id
getGlobalComponentTypeInformation.input[0].type=java.lang.String
getGlobalComponentTypeInformation.input[0].required=false
getGlobalComponentTypeInformation.output[0].name=info
getGlobalComponentTypeInformation.output[0].type=java.lang.String
getGlobalComponentTypeInformation.output[1].name=ids
getGlobalComponentTypeInformation.output[1].type=java.util.Set
getGlobalComponentTypeInformation.output[2].name=value
getGlobalComponentTypeInformation.output[2].type=com.sun.jsftemplating.layout.descriptors.ComponentType

#  This handler finds the (closest) requested
# 	    {@link LayoutComponent} for the given viewId /
# 	    clientId.  If the viewId is not supplied,
# 	    the current UIViewRoot will be used.  The
# 	    {@link LayoutComponent} is returned via the component
# 	    output parameter.  If an exact match is not found, it will return
# 	    the last {@link LayoutComponent} found while searching the tree --
# 	    this should be the last {@link LayoutComponent} in the hierarchy
# 	    of the specified component.
# 
# 	 This is not an easy process since JSF components may not all be
# 	    NamingContainers, so the clientId is not sufficient to
# 	    find it.  This is unfortunate, but we we have to deal with it.
getLayoutComponent.class=com.sun.jsftemplating.handlers.MetaDataHandlers
getLayoutComponent.method=getLayoutComponent
getLayoutComponent.input[0].name=viewId
getLayoutComponent.input[0].type=java.lang.String
getLayoutComponent.input[0].required=false
getLayoutComponent.input[1].name=clientId
getLayoutComponent.input[1].type=java.lang.String
getLayoutComponent.input[1].required=true
getLayoutComponent.output[0].name=component
getLayoutComponent.output[0].type=com.sun.jsftemplating.layout.descriptors.LayoutComponent

#  This handler provides a way to get a {@link LayoutDefinition}.
getLayoutDefinition.class=com.sun.jsftemplating.handlers.MetaDataHandlers
getLayoutDefinition.method=getLayoutDefinition
getLayoutDefinition.input[0].name=viewId
getLayoutDefinition.input[0].type=java.lang.String
getLayoutDefinition.input[0].required=false
getLayoutDefinition.output[0].name=layoutDefinition
getLayoutDefinition.output[0].type=com.sun.jsftemplating.layout.descriptors.LayoutDefinition

#  This handler returns true if jsft is running in debug mode.
isDebug.class=com.sun.jsftemplating.handlers.MetaDataHandlers
isDebug.method=isDebug
isDebug.output[0].name=value
isDebug.output[0].type=java.lang.Boolean
